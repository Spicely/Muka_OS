{"version":3,"file":"static/webpack/5.b8abbbc890151a5f16bd.hot-update.js","sources":["webpack:///./components/lib/Carousel/index.tsx"],"sourcesContent":["import React, { Component, Children, CSSProperties } from 'react'\r\nimport { isNumber, isFunction, isString } from 'muka'\r\nimport hexRgb from 'hex-rgb'\r\nimport Image from '../Image'\r\nimport { getClassName, prefix } from '../utils'\r\n\r\nexport interface ICarouselProps {\r\n    className?: string\r\n    dotPosition?: 'top' | 'bottom' | 'left' | 'right' | 'bottomRight' | 'bottomLeft'\r\n    dotType?: 'rectangle' | 'circular'\r\n    dotColor?: string\r\n    dotClassName?: string\r\n    value?: string[]\r\n    dots?: boolean\r\n    autoplay?: boolean\r\n    defaultSelected?: number\r\n    style?: CSSProperties\r\n    time?: number\r\n    onChnage?: (selected: number) => void\r\n    effect?: 'scrollx' | 'scrolly' | 'fade'\r\n    selected?: number\r\n}\r\n\r\ninterface IState {\r\n    selectIndex: number\r\n    left: number\r\n    top: number\r\n    animate: boolean\r\n}\r\n\r\nconst prefixClass = 'carousel'\r\n\r\nexport default class Carousel extends Component<ICarouselProps, IState> {\r\n\r\n    constructor(props: ICarouselProps) {\r\n        super(props)\r\n        if (isNumber(props.defaultSelected)) {\r\n            this.state.selectIndex = props.selected || props.defaultSelected\r\n        }\r\n    }\r\n\r\n    public static defaultProps: ICarouselProps = {\r\n        dotPosition: 'bottom',\r\n        dotType: 'rectangle',\r\n        dots: true,\r\n        time: 2000,\r\n        autoplay: false,\r\n        effect: 'scrollx'\r\n    }\r\n\r\n    public state: IState = {\r\n        selectIndex: 0,\r\n        top: 0,\r\n        left: 0,\r\n        animate: true\r\n    }\r\n\r\n    private carouselNode: Element | null = null\r\n\r\n    private timer?: any\r\n\r\n    private animateNode: Element | null = null\r\n\r\n    public render(): JSX.Element {\r\n        const { className, children, dotPosition, dotClassName, dots, effect, style, autoplay, value, dotType, dotColor } = this.props\r\n        const { selectIndex, left, top, animate } = this.state\r\n        console.log(selectIndex,' 222222222222222')\r\n        const length = Children.count(value || children)\r\n        const cssStyle: CSSProperties = {}\r\n        const dotStyle: CSSProperties = {}\r\n        if (dotColor) {\r\n            const color = hexRgb(dotColor)\r\n            dotStyle.background = `rgba(${color.red}, ${color.green}, ${color.blue}, 0.6)`\r\n        }\r\n        if (effect === 'scrollx') {\r\n            cssStyle.transform = `translate3d(-${selectIndex * left}px, 0, 0)`\r\n            cssStyle.transition = animate ? '' : 'none'\r\n        } else if (effect === 'scrolly') {\r\n            cssStyle.transform = `translate3d(0, -${selectIndex * top}px, 0)`\r\n            cssStyle.transition = animate ? '' : 'none'\r\n        }\r\n        return (\r\n            <div\r\n                className={getClassName(`${prefixClass}${effect === 'scrollx' ? ' flex' : ''}`, className)}\r\n                style={style}\r\n                ref={(e) => this.carouselNode = e}\r\n            >\r\n                {\r\n                    Children.map(value || children, (child, index) => {\r\n                        return (\r\n                            <div\r\n                                className={getClassName(`${prefixClass}__item flex_center ${effect === 'fade' ? prefix + 'fade' : ''}`)}\r\n                                style={{\r\n                                    ...cssStyle,\r\n                                    opacity: effect === 'fade' ? index === selectIndex ? 1 : 0 : 1\r\n\r\n                                }}\r\n                                ref={(e) => this.animateNode = e}\r\n                                key={index}\r\n                            >\r\n                                {\r\n                                    isString(child) ? <Image className={getClassName(`${prefixClass}__item_image`)} src={child} /> : child\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {autoplay && effect !== 'fade' && Children.map(value || children, (child, index) => {\r\n                    if (index === 0) {\r\n                        return (\r\n                            <div\r\n                                className={getClassName(`${prefixClass}__item flex_center`)}\r\n                                style={cssStyle}\r\n                                key={`extend_${index}`}\r\n                                ref={(e) => this.animateNode = e}\r\n                            >\r\n                                {\r\n                                    isString(child) ? <Image className={getClassName(`${prefixClass}__item_image`)} src={child} /> : child\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return undefined\r\n                })\r\n                }\r\n                {\r\n                    dots && (\r\n                        <div className={getClassName(`${prefixClass}_dot ${prefix}${dotPosition}  flex_justify`)}>\r\n                            <div className=\"flex_center\">\r\n                                <span className={(dotPosition === 'bottom' || dotPosition === 'top' || dotPosition === 'bottomRight' || dotPosition === 'bottomLeft') ? 'flex' : ''}>\r\n                                    {\r\n                                        Children.map(value || children, (child, index) => {\r\n                                            return (\r\n                                                <div\r\n                                                    className={getClassName(`${prefixClass}_dot__item ${prefix}${dotType} ${selectIndex % length === index ? prefix + 'active' : ''}`, dotClassName)} key={index}\r\n                                                    onClick={this.handleTabIndex.bind(this, index)}\r\n                                                    style={selectIndex % length === index ? { background: dotColor } : dotStyle}\r\n                                                />\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { autoplay } = this.props\r\n        if (this.carouselNode) {\r\n            const obj = this.carouselNode.getBoundingClientRect()\r\n            this.setState({\r\n                top: obj.height,\r\n                left: obj.width\r\n            })\r\n        }\r\n        if (this.animateNode) {\r\n            this.animateNode.addEventListener('transitionend', this.handleAnimate)\r\n        }\r\n        this.interval(autoplay || false)\r\n    }\r\n\r\n    public componentWillReceiveProps(nextProps: ICarouselProps) {\r\n        const { autoplay, selected } = this.props\r\n        if (autoplay !== nextProps.autoplay) {\r\n            if (nextProps.autoplay && !this.timer) {\r\n                this.interval(true)\r\n            } else {\r\n                clearInterval(this.timer)\r\n                this.timer = undefined\r\n            }\r\n        }\r\n        if (isNumber(selected) && selected !== nextProps.selected) {\r\n            if (this.animateNode) {\r\n                this.animateNode.removeEventListener('transitionend', this.handleAnimate)\r\n            }\r\n            clearInterval(this.timer)\r\n            const time = setTimeout(() => {\r\n                this.setState({\r\n                    selectIndex: selected\r\n                }, () => {\r\n                    if (this.animateNode) {\r\n                        this.animateNode.addEventListener('transitionend', this.handleAnimate)\r\n                    }\r\n                    // this.interval(nextProps.autoplay || false)\r\n                })\r\n                clearTimeout(time)\r\n            }, 100)\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        clearInterval(this.timer)\r\n        if (this.animateNode) {\r\n            this.animateNode.removeEventListener('transitionend', this.handleAnimate)\r\n        }\r\n        this.timer = undefined\r\n    }\r\n\r\n    private interval(autoPlay: boolean) {\r\n        const { time, effect } = this.props\r\n        if (autoPlay) {\r\n            this.timer = setInterval(() => {\r\n                const { children, value } = this.props\r\n                const { selectIndex } = this.state\r\n                const length = Children.count(value || children)\r\n                const status = effect !== 'fade' ? selectIndex === length : selectIndex === length - 1\r\n                this.handleTabIndex(status ? 0 : selectIndex + 1)\r\n            }, time)\r\n        }\r\n    }\r\n\r\n    private handleAnimate = () => {\r\n        const { children, effect, value } = this.props\r\n        const { selectIndex } = this.state\r\n        const length = Children.count(value || children)\r\n        if (selectIndex === length && effect !== 'fade') {\r\n            this.setState({\r\n                selectIndex: 0,\r\n                animate: false\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        animate: true\r\n                    })\r\n                }, 20)\r\n            })\r\n            return\r\n        }\r\n    }\r\n\r\n    private handleTabIndex(index: number) {\r\n        const { children, onChnage, value } = this.props\r\n        const length = Children.count(value || children)\r\n        this.setState({\r\n            selectIndex: index\r\n        })\r\n        if (isFunction(onChnage)) {\r\n            onChnage(index % length)\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AA0BA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AACA;AACA;AAJA;AACA;AAjBA;AACA;AADA;AACA;AADA;AAqLA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AArMA;AACA;AACA;AACA;AALA;AAKA;AACA;;;AAuBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAEA;AACA;AAEA;AAFA;AAKA;AAAA;AAAA;AACA;AARA;AAWA;AAAA;AAAA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AASA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAqBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;;;;AAnNA;AACA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;A","sourceRoot":""}