{"version":3,"file":"static/webpack/5.220f6db2ed18450f192c.hot-update.js","sources":["webpack:///./pages/apps/design/editor.tsx"],"sourcesContent":["import { Component, ChangeEvent } from 'react'\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd'\r\nimport { Modal } from 'antd'\r\nimport { assign, cloneDeep } from 'lodash'\r\nimport { bindActionCreators } from 'redux'\r\nimport PageHead from 'layouts/PageHead'\r\nimport PageLayout from 'layouts/PageLayout'\r\nimport { omit, isArray, isString } from 'muka'\r\nimport { IInitState } from 'store/state'\r\nimport { Alert, BoxLine, Button, Carousel, Dialog, Drag, Icon, Image, Label, LabelHeader, NavBar, TabBar, ILFormItem, LForm, ILFormFun, Pagination, ScrollView, SearchBar, INavBarRightIcon, INavBarRightImage, Upload } from 'components'\r\nimport { IValue } from 'components/lib/utils'\r\nimport http, { IinitProps, IRresItems, initErrorToView, baseUrl, deviaDecrypt, decrypt } from 'utils/axios'\r\nimport { connect } from 'react-redux'\r\nimport { SET_COMPONENT_DATA, IComponentData, actions } from 'store/action/design'\r\nimport componentViewData from '../../../data/componentData'\r\nimport EditComponent from '../editComponent'\r\nimport { nav_bar } from 'layouts/PageLayout/index.less'\r\nimport { app_view, tpl_phone, m_tit, cri, lon, m_scroll_view, com, com_actions, com_bar, com_label, form_style, label_list, label_list_btn, label_list_int, label_view, label_view_list, label_list_icon } from '../index.less'\r\nimport { component_label, component_list, icons_items, nav_color, image, image_item, uploadViewClassName, scroll_view } from './index.less'\r\n\r\nconst { confirm } = Modal\r\n\r\ninterface IProps {\r\n    componentData: IComponentData\r\n    setComponentData: (data: IComponentData) => void\r\n}\r\n\r\ninterface ITabBarValue {\r\n    label: string\r\n    content: JSX.Element | string\r\n    data: string\r\n}\r\n\r\ninterface IComponents {\r\n    component: IComponentType\r\n    props: {\r\n        [name: string]: any\r\n    }\r\n    edit: boolean\r\n}\r\n\r\ntype IComponentType = 'TabBar' | 'NavBar' | 'Carousel' | 'SearchBar' | ''\r\n\r\ntype typeList = 'LForm' | 'Carousel'\r\n\r\ninterface IState {\r\n    components: IComponents[]\r\n    componentName: string\r\n    selected: number\r\n    type: typeList\r\n    icons: any[]\r\n    images: any[]\r\n    searchSelect: boolean\r\n    uploadDialog: boolean\r\n    pageCurrent: number\r\n    total: number\r\n}\r\n\r\nconst reorder = (list: IComponents[], startIndex: number, endIndex: number) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\nclass AppsDesign extends Component<IProps, IState> {\r\n    public static async getInitialProps(ctx: IinitProps) {\r\n        const data: IRresItems = await http('apps/findPageProps', {\r\n            classifyId: ctx.query.classifyId\r\n        }, {\r\n                headers: { cookie: ctx.req && ctx.req.headers.cookie }\r\n            })\r\n        if (data.status === 203 && ctx.res) {\r\n            return initErrorToView(ctx)\r\n        }\r\n        ctx.store.dispatch({ type: SET_COMPONENT_DATA, data: data.data })\r\n        return {}\r\n    }\r\n\r\n    public state: IState = {\r\n        components: [],\r\n        icons: [],\r\n        images: [],\r\n        total: 0,\r\n        componentName: '',\r\n        selected: 0,\r\n        type: 'LForm',\r\n        searchSelect: false,\r\n        uploadDialog: false,\r\n        pageCurrent: 1\r\n    }\r\n\r\n    private index: number = 0\r\n\r\n    private listIndex: number = 0\r\n\r\n    private componentType: IComponentType = ''\r\n\r\n    private exFun: ILFormFun | null = null\r\n\r\n    private loading: boolean = false\r\n\r\n    public render(): JSX.Element {\r\n        const { componentData } = this.props\r\n        const { searchSelect, icons, uploadDialog, images, pageCurrent, total } = this.state\r\n        return (\r\n            <PageHead title=\"小程序-页面设计\">\r\n                <PageLayout\r\n                    defaultSelected=\"/apps\"\r\n                    defaultExtendSelected=\"/apps/design\"\r\n                    actionsView={this.getActionsView()}\r\n                >\r\n                    <NavBar\r\n                        className={nav_bar}\r\n                        divider={false}\r\n                        left={\r\n                            <LabelHeader title={<span>当前位置: <Label>页面设计</Label></span>} line=\"vertical\" />\r\n                        }\r\n                    />\r\n                    <div className={app_view}>\r\n                        <Alert\r\n                            inheritColor\r\n                            title=\"小程序说明\"\r\n                            message=\"小程序是微信小程序的管理后台，可在此设置个性化首页排版、基本设置、设置微信支付、审核发布。\"\r\n                        />\r\n                        <div className=\"flex\" style={{ marginTop: '2rem' }}>\r\n                            <div className={`${tpl_phone} flex_column`}>\r\n                                <div className={m_tit} onClick={this.handleTabComponent.bind(this, 'Page')}>\r\n                                    <span className={cri}></span>\r\n                                    <span className={lon}></span>\r\n                                </div>\r\n                                <Drag.Box\r\n                                    className={`flex_1 ${m_scroll_view}`}\r\n                                    style={{ background: componentData.pageColor }}\r\n                                    onDragEnter={this.handleDragEnter}\r\n                                    onDragSuccess={this.handleDragSuccess}\r\n                                >\r\n                                    <DragDropContext onDragEnd={this.onDragEnd}>\r\n                                        <Droppable droppableId=\"droppable\" >\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    {...provided.droppableProps}\r\n                                                    ref={provided.innerRef}\r\n                                                    style={{ height: '100%' }}\r\n                                                >\r\n                                                    {componentData.pagePorps.map((item: IComponents, index: number) => (\r\n                                                        <Draggable key={index} draggableId={index.toString()} index={index}>\r\n                                                            {(provided) => (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                >\r\n                                                                    {this.getComponentsView(item, index)}\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </Draggable>\r\n                                                    ))}\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </DragDropContext>\r\n                                </Drag.Box>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Dialog visible={searchSelect} title=\"字体/图片\" style={{ width: 1088, height: 756 }} onClose={this.handleCloseDialog.bind(this, 'searchSelect')} onFirstShow={this.getDialogData}>\r\n                        <TabBar tabBarClassName=\"mk_divider\" style={{ height: '100%' }} onChange={this.handleTabBarChange}>\r\n                            <TabBar.Item label=\"字体\">\r\n                                <BoxLine >\r\n                                    {\r\n                                        icons.map((i) => {\r\n                                            return (\r\n                                                <div\r\n                                                    className={`flex_center ${icons_items}`}\r\n                                                    key={i.id}\r\n                                                    onClick={this.setComProps.bind(this, { type: 'icon', 'url': i.name }, 'searchSelect')}\r\n                                                >\r\n                                                    <Icon icon={i.name} />\r\n                                                </div>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </BoxLine>\r\n                            </TabBar.Item>\r\n                            <TabBar.Item label=\"服务器图片\">\r\n                                <NavBar\r\n                                    className={nav_color}\r\n                                    left={null}\r\n                                    right={\r\n                                        <Button mold=\"primary\" onClick={this.handleShowUpload.bind(this, 'uploadDialog')}>上传图片</Button>\r\n                                    }\r\n                                />\r\n                                <ScrollView scrollY className={scroll_view}>\r\n                                    {\r\n                                        images.map((i, index) => {\r\n                                            return (\r\n                                                <div\r\n                                                    className={image}\r\n                                                    key={index}\r\n                                                    onClick={this.setComProps.bind(this, { type: 'image', 'url': baseUrl + i.previewUrl }, 'searchSelect')}\r\n                                                >\r\n                                                    <div className=\"flex_justify\" style={{ width: '100%', height: '100%' }}>\r\n                                                        <Image src={baseUrl + i.previewUrl} className={image_item} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ScrollView>\r\n                                <Pagination current={pageCurrent} total={total} pageSize={20} onChange={this.handleCurrent} />\r\n                            </TabBar.Item>\r\n                        </TabBar>\r\n                    </Dialog>\r\n                    <Dialog title=\"上传图片\" footer={null} visible={uploadDialog} onClose={this.handleCloseDialog.bind(this, 'uploadDialog')}>\r\n                        <Upload.Dragger\r\n                            style={{ marginTop: '10px' }}\r\n                            action={`/os/image/globalUpload`}\r\n                            baserUrl={baseUrl}\r\n                            withCredentials\r\n                            onUploadSuccess={this.handleUploadSuccess}\r\n                            uploadViewClassName={uploadViewClassName}\r\n                        />\r\n                    </Dialog>\r\n                </PageLayout>\r\n            </PageHead>\r\n        )\r\n    }\r\n\r\n    private handleCurrent = (val: number) => {\r\n        this.setState({\r\n            pageCurrent: val\r\n        })\r\n    }\r\n\r\n    private handleTabBarChange = async (val: string | number | undefined) => {\r\n        const { images } = this.state\r\n        if (val === 1 && images.length === 0 && !this.loading) {\r\n            this.loading = true\r\n            try {\r\n                const data: IRresItems = await http('image/globalFind')\r\n                this.loading = false\r\n                this.setState({\r\n                    images: [...data.data.images],\r\n                    total: data.data.total\r\n                })\r\n            } catch (msg) {\r\n                this.loading = false\r\n                console.log(msg)\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleUploadSuccess = (val: any, data: any) => {\r\n        const { images } = this.state\r\n        const devia = deviaDecrypt(data.devia)\r\n        data = JSON.parse(decrypt(data.value, data.secret, devia))\r\n        images.unshift(data.data)\r\n        this.setState({\r\n            images\r\n        })\r\n    }\r\n\r\n    private getItem = (exFun: ILFormFun): ILFormItem[] => {\r\n        const { componentName } = this.state\r\n        this.exFun = exFun\r\n        if (!componentName) {\r\n            return []\r\n        }\r\n        const data: any = componentViewData(this)\r\n        return data[componentName]\r\n    }\r\n\r\n    private handleShowUpload = (field: any) => {\r\n        this.setState({\r\n            [field]: true\r\n        })\r\n    }\r\n    private getDialogData = async () => {\r\n        try {\r\n            const data: IRresItems = await http('icons/find')\r\n            this.setState({\r\n                icons: data.data\r\n            })\r\n        } catch (msg) {\r\n            console.log(msg)\r\n        }\r\n\r\n    }\r\n\r\n    private handleDragEnter = () => {\r\n        // this.setState({\r\n        //     showLine: true\r\n        // })\r\n    }\r\n\r\n    private handleFormChange = () => {\r\n        const { componentData, setComponentData } = this.props\r\n        const { componentName } = this.state\r\n        const pageProps: any = [...componentData.pagePorps]\r\n        const data: any = {}\r\n        if (this.exFun) {\r\n            const val: any = this.exFun.getFieldValue()\r\n            Object.keys(val).map((i) => {\r\n                const key = i.split('.')\r\n                if (key.length > 1) {\r\n                    if (val[i]) {\r\n                        if (data[key[0]]) {\r\n                            data[key[0]][key[1]] = this.getStyleValue(key[1], val[i])\r\n                        } else {\r\n                            data[key[0]] = {}\r\n                            data[key[0]][key[1]] = this.getStyleValue(key[1], val[i])\r\n                        }\r\n                    }\r\n                } else {\r\n                    data[i] = val[i]\r\n                }\r\n                if (componentName === 'SearchBar' && key[0] === 'extendRadio') {\r\n                    if (val[i] === 'label' && !isString(val['right'])) {\r\n                        data['right'] = '搜索'\r\n                    } else if (val[i] === 'actions' && !isArray(val['right'])) {\r\n                        data['right'] = [{\r\n                            type: 'icon',\r\n                            url: 'msg',\r\n                            color: '#fff'\r\n                        }]\r\n                    }\r\n                }\r\n            })\r\n            delete data['extendRadio']\r\n        }\r\n        pageProps[this.index].props = assign(pageProps[this.index].props, data)\r\n        componentData.pagePorps = pageProps\r\n        setComponentData({ ...componentData })\r\n    }\r\n\r\n    private getStyleValue(key: string, val: string) {\r\n        switch (key) {\r\n            case 'height': return Number(val)\r\n            case 'width': return Number(val)\r\n            default: return val\r\n        }\r\n    }\r\n\r\n    private handleCloseDialog(field: 'searchSelect' | 'uploadDialog') {\r\n        this.setState({\r\n            [field]: false\r\n        })\r\n    }\r\n\r\n    private handleFormIntChange(field: string, e: any) {\r\n        const { componentData, setComponentData } = this.props\r\n        const pageProps: any = [...componentData.pagePorps]\r\n        pageProps[this.index].props[field] = e.target.value\r\n        setComponentData({ ...componentData })\r\n    }\r\n\r\n    private setComProps = (data: INavBarRightIcon | INavBarRightImage, dialogName: 'searchSelect') => {\r\n        const { componentData, setComponentData }: any = this.props\r\n        const right = componentData.pagePorps[this.index].props.right\r\n        right[this.listIndex] = data\r\n        this.setState({\r\n            [dialogName]: false\r\n        }, () => {\r\n            setComponentData(cloneDeep(componentData))\r\n        })\r\n    }\r\n\r\n    private getComponentsView(data: IComponents, index: number) {\r\n        switch (data.component) {\r\n            case 'NavBar': return (\r\n                <EditComponent\r\n                    edit={data.edit}\r\n                    key={index}\r\n                    onClick={this.handleEdit.bind(this, data, index)}\r\n                    onEdit={this.handleEditStart.bind(this, data, index, 'LForm')}\r\n                    onDelete={this.handleDelete.bind(this, index)}\r\n                >\r\n                    <NavBar {...data.props} />\r\n                </EditComponent>\r\n            )\r\n            case 'SearchBar': return (\r\n                <EditComponent\r\n                    edit={data.edit}\r\n                    key={index}\r\n                    onClick={this.handleEdit.bind(this, data, index)}\r\n                    onEdit={this.handleEditStart.bind(this, data, index, 'LForm')}\r\n                    onDelete={this.handleDelete.bind(this, index)}\r\n                >\r\n                    <SearchBar {...data.props} />\r\n                </EditComponent>\r\n            )\r\n            case 'Carousel': return (\r\n                <EditComponent\r\n                    edit={data.edit}\r\n                    key={index}\r\n                    onClick={this.handleEdit.bind(this, data, index)}\r\n                    onEdit={this.handleEditStart.bind(this, data, index, 'Carousel')}\r\n                    onDelete={this.handleDelete.bind(this, index)}\r\n                >\r\n                    <Carousel {...data.props} />\r\n                </EditComponent>\r\n            )\r\n            case 'TabBar': {\r\n                const value: ITabBarValue[] = data.props.value || []\r\n                omit(data.props, ['value'])\r\n                return (\r\n                    <EditComponent\r\n                        edit={data.edit}\r\n                        key={index}\r\n                        onClick={this.handleEdit.bind(this, data, index)}\r\n                        onEdit={this.handleEditStart.bind(this, data, index, 'Carousel')}\r\n                        onDelete={this.handleDelete.bind(this, index)}\r\n                    >\r\n                        <TabBar {...data.props} >\r\n                            {\r\n                                value.map((i: any, index: number) => {\r\n                                    return (\r\n                                        <TabBar.Item label={i.label || <Label color=\"red\">未设置</Label>} key={index}>{i.content}</TabBar.Item>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TabBar>\r\n                    </EditComponent>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleDelete(index: number) {\r\n        const { components } = this.state\r\n        components.splice(index, 1)\r\n        this.setState({\r\n            components: [...components]\r\n        })\r\n    }\r\n\r\n    private handleEditStart(data: IComponents, index: number, field: typeList) {\r\n        this.index = index\r\n        this.componentType = data.component\r\n        this.setState({\r\n            type: field,\r\n            componentName: data.component,\r\n            selected: 1\r\n        })\r\n    }\r\n\r\n    private handlePickerChange = (data: any) => {\r\n        const { components } = this.state\r\n        const value = data.map((i: any) => {\r\n            return i.url\r\n        })\r\n        components[this.index].props = {\r\n            ...components[this.index].props,\r\n            value\r\n        }\r\n        this.setState({\r\n            components: [...components]\r\n        })\r\n    }\r\n\r\n\r\n    private handleEdit(data: IComponents, index: number) {\r\n        const { components } = this.state\r\n        data.edit = true\r\n        components[index] = data\r\n        this.setState({\r\n            components: [...components]\r\n        })\r\n    }\r\n\r\n    private getActionsView(): JSX.Element {\r\n        const { selected, componentName } = this.state\r\n        return (\r\n            <TabBar type=\"vertical\" className={com} selected={selected} tabBarClassName={com_bar} tabItemClassName={com_actions}>\r\n                <TabBar.Item icon={<Icon icon=\"ios-apps\" />} tooltipTitle=\"页面组件\" placement=\"left\">\r\n                    <Drag data={{ component: 'NavBar', props: {}, edit: false }}>\r\n                        <NavBar />\r\n                    </Drag>\r\n                    <Label className={com_label} color=\"#999\">轮播</Label>\r\n                    <Drag data={{ component: 'Carousel', props: { value: ['/static/banner-1.jpg', '/static/banner-2.jpg'] }, edit: false }}>\r\n                        <Carousel value={['/static/banner-1.jpg', '/static/banner-2.jpg']}>\r\n                        </Carousel>\r\n                    </Drag>\r\n                    <Label className={com_label} color=\"#999\">选项卡</Label>\r\n                    <Drag data={{ component: 'TabBar', props: { value: [{ label: '选项', content: '选项', data: '' }, { label: '选项', content: '选项', data: '' }] }, edit: false }}>\r\n                        <TabBar>\r\n                            <TabBar.Item label=\"选项\" >选项</TabBar.Item>\r\n                            <TabBar.Item label=\"选项\" >选项</TabBar.Item>\r\n                        </TabBar>\r\n                    </Drag>\r\n                </TabBar.Item>\r\n                <TabBar.Item icon={<Icon icon=\"ios-arrow-back\" />} tooltipTitle=\"参数设置\" placement=\"left\" >\r\n                    {\r\n                        componentName === 'Page' && this.getPageNode()\r\n                    }\r\n                    {\r\n                        componentName !== 'Page' && <LForm getItems={this.getItem} className={form_style} />\r\n                    }\r\n                    {/*{this.componentType === 'TabBar' ?\r\n                        (\r\n                            <DragDropContext onDragEnd={this.onDragTabBar}>\r\n                                <Droppable droppableId=\"tab_bar\" >\r\n                                    {(provided) => (\r\n                                        <div\r\n                                            {...provided.droppableProps}\r\n                                            ref={provided.innerRef}\r\n                                            className={label_view}\r\n                                        >\r\n                                            {components[this.index].props.value.map((i: ITabBarValue, index: number) => (\r\n                                                <Draggable key={index} draggableId={'tab_bar' + index.toString()} index={index}>\r\n                                                    {(provided) => (\r\n                                                        <div\r\n                                                            className={`flex ${label_view_list}`}\r\n                                                            ref={provided.innerRef}\r\n                                                            {...provided.draggableProps}\r\n                                                            {...provided.dragHandleProps}\r\n\r\n                                                        >\r\n                                                            <div className=\"flex_1\">\r\n                                                                <div className=\"flex\">\r\n                                                                    <div className={`flex_justify ${label_list}`}>选项卡文字</div>\r\n                                                                    <Input\r\n                                                                        className={`flex_1 ${label_list_int}`}\r\n                                                                        value={i.label}\r\n                                                                        onChange={this.handleTabBarInt.bind(this, index)}\r\n                                                                        closeIconShow={false}\r\n                                                                        maxLength={5}\r\n                                                                        showMaxLength\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div className=\"flex\" style={{ marginTop: 10 }}>\r\n                                                                    <Input className={`flex_1 ${label_list_int}`} value={i.data} placeholder=\"请选择数据\" disabled closeIconShow={false} style={{ borderRight: 0 }} />\r\n                                                                    <Button className={`flex_justify ${label_list_btn}`} mold=\"primary\">选择数据</Button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className={`${label_list_icon} flex_justify`}>\r\n                                                                <Icon\r\n                                                                    icon=\"md-close-circle\"\r\n                                                                    color=\"rgba(0, 0, 0, 0.3)\"\r\n                                                                    style={{ cursor: 'pointer' }}\r\n                                                                    onClick={this.handleTabBarDel.bind(this, index)}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            ))}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n                                    )}\r\n                                </Droppable>\r\n                            </DragDropContext>\r\n\r\n                        ) : null\r\n                    } */}\r\n                </TabBar.Item>\r\n            </TabBar>\r\n        )\r\n    }\r\n\r\n    private getPageComponentItem = (fn: ILFormFun): ILFormItem[] => {\r\n        const { componentData } = this.props\r\n        return [{\r\n            component: 'Input',\r\n            label: '页面名称',\r\n            props: {\r\n                placeholder: '请输入名称',\r\n                value: componentData.name,\r\n                maxLength: 16,\r\n            },\r\n            additional: <Label color=\"#1890ff\" style={{ paddingLeft: 0 }}>注意：页面名称是便于后台查找。</Label>,\r\n            field: 'name'\r\n        }, {\r\n            component: 'Textarea',\r\n            label: '页面介绍',\r\n            props: {\r\n                placeholder: '请输入标题',\r\n                value: componentData.introduce,\r\n                maxLength: 50,\r\n                showMaxLength: true,\r\n            },\r\n            field: 'introduce'\r\n        }, {\r\n            component: 'Colors',\r\n            label: '页面背景',\r\n            props: {\r\n                initColor: componentData.pageColor,\r\n                onChange: this.updateComColorData.bind(this, 'pageColor'),\r\n            },\r\n            field: 'pageColor'\r\n        }]\r\n    }\r\n\r\n    private handleSelectView = (index: number) => {\r\n        this.listIndex = index\r\n        this.setState({\r\n            searchSelect: true\r\n        })\r\n    }\r\n\r\n    private getPageNode() {\r\n        return (\r\n            <LForm\r\n                getItems={this.getPageComponentItem}\r\n                className={form_style}\r\n            />\r\n        )\r\n    }\r\n    private updateComColorData = (field: string, value: any) => {\r\n        const { componentData, setComponentData }: any = this.props\r\n        componentData[field] = value.hex\r\n        setComponentData(cloneDeep(componentData))\r\n    }\r\n\r\n    private onDragTabBar = (result: DropResult) => {\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n        const { components } = this.state\r\n\r\n        const items = reorder(\r\n            components[this.index].props.value,\r\n            result.source.index,\r\n            result.destination.index\r\n        )\r\n        components[this.index].props.value = items\r\n        this.setState({\r\n            components: [...components]\r\n        })\r\n    }\r\n\r\n    private onDragEnd = (result: DropResult) => {\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n\r\n        const items = reorder(\r\n            this.state.components,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n\r\n        this.setState({\r\n            components: items\r\n        })\r\n    }\r\n\r\n    private handleTabComponent = (name: string) => {\r\n        this.setState({\r\n            componentName: name,\r\n            selected: 1\r\n        })\r\n    }\r\n\r\n\r\n    private handleTabBarDel = (index: number) => {\r\n        confirm({\r\n            title: '提示',\r\n            content: '确定要删除么？',\r\n            okText: '确定',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            onOk: () => {\r\n                const { components } = this.state\r\n                components[this.index].props.value.splice(index, 1)\r\n                this.setState({\r\n                    components: [...components]\r\n                })\r\n            },\r\n        })\r\n\r\n    }\r\n\r\n    private handleTabBarInt = (index: number, e: ChangeEvent<HTMLInputElement>) => {\r\n        const { components } = this.state\r\n        components[this.index].props.value[index].label = e.target.value\r\n        this.setState({\r\n            components: [...components]\r\n        })\r\n    }\r\n\r\n    private handleDragSuccess = (data: any) => {\r\n        const { components } = this.state\r\n        components.push(data)\r\n        this.setState({\r\n            components: [...components]\r\n        })\r\n    }\r\n}\r\nexport default connect(\r\n    (state: IInitState) => ({\r\n        componentData: state.componentData\r\n    }),\r\n    (dispatch: any) => bindActionCreators(actions, dispatch)\r\n)(AppsDesign)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAqCA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiIA;AACA;AACA;AADA;AAGA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAiBA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","sourceRoot":""}