{"version":3,"file":"static/webpack/3.6a30f05635f8aab39cd6.hot-update.js","sources":["webpack:///./components/lib/Carousel/style/index.less?5cf1","webpack:///./components/lib/Carousel/style/index.ts","webpack:///./components/lib/LForm/index.tsx","webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?d95b","webpack:///./node_modules/next/dist/client/next-dev.js","webpack:///./pages/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin;\n    if (module.hot) {\n      var injectCss = function injectCss(prev, href) {\n        var link = prev.cloneNode();\n        link.href = href;\n        link.onload = function() {\n          prev.parentNode.removeChild(prev);\n        };\n        prev.stale = true;\n        prev.parentNode.insertBefore(link, prev);\n      };\n      module.hot.dispose(function() {\n        window.__webpack_reload_css__ = true;\n      });\n      if (window.__webpack_reload_css__) {\n        module.hot.__webpack_reload_css__ = false;\n        console.log(\"[HMR] Reloading stylesheets...\");\n        var prefix = document.location.protocol + '//' + document.location.host;\n        document\n          .querySelectorAll(\"link[href][rel=stylesheet]\")\n          .forEach(function(link) {\n            if (!link.href.match(prefix) || link.stale) return;\n            injectCss(link, link.href.split(\"?\")[0] + \"?unix=1564559735897\");\n          });\n      }\n    }\n  ","import '../../style'\r\nimport './index.less'\r\nimport '../../Image/style'\r\n","import React, { Component, ChangeEvent } from 'react'\r\nimport Loadable from 'react-loadable'\r\nimport moment from 'moment'\r\nimport { omit, isFunction, isNil, isUndefined, hash } from 'muka'\r\nimport { getClassName } from '../utils'\r\nimport { IButtonProps } from '../Button'\r\nimport { RadioGroupProps } from 'antd/lib/radio'\r\nimport { IInputProps } from '../Input'\r\nimport { ILUpload, ILUploadChangeParam } from '../LUpload'\r\nimport { ILDatePicker } from '../DatePicker'\r\nimport { IImagePickerProps } from '../ImagePicker'\r\nimport { IMapProps } from '../Map'\r\nimport { ITextareaProps } from '../Textarea'\r\nimport { IColorsProps, ColorResult } from '../Colors'\r\nimport { ICarouselProps } from '../Carousel'\r\n\r\ninterface ILFormUpload extends ILUpload {\r\n    label?: string | JSX.Element\r\n}\r\n\r\ntype component = 'Colors' | 'Input' | 'Button' | 'Radio' | 'DatePicker' | 'LUpload' | 'NULL' | 'Label' | 'RadioGroup' | 'Select' | 'ImagePicker' | 'Map' | 'Textarea' | 'Carousel' | 'Slider'\r\ntype props = RadioGroupProps | IInputProps | IButtonProps | ILDatePicker | ILFormUpload | IImagePickerProps | IMapProps | ICarouselProps | ITextareaProps | IColorsProps | undefined\r\n\r\nexport interface ILFormItem {\r\n    component: component\r\n    props?: props\r\n    field?: string\r\n    label?: string\r\n    additional?: string | JSX.Element\r\n    className?: string\r\n    render?: boolean\r\n}\r\n\r\nexport interface ILFormProps {\r\n    getItems: (exFun: ILFormFun) => ILFormItem[]\r\n    showType?: 'column' | 'row'\r\n    className?: string\r\n}\r\n\r\nexport interface ILFormFun {\r\n    getFieldValue: (field?: string[]) => IValue\r\n    cleanFieldValue: () => void\r\n    setFieldValue: (params: IValue) => void\r\n    showFieldElement: (params: string[]) => void\r\n    hideFieldElement: (params: string[]) => void\r\n    updateFieldProps: (parsms: IValue) => void\r\n}\r\n\r\ninterface IValue {\r\n    [name: string]: any\r\n}\r\n\r\ninterface ILFormChild {\r\n    type: component\r\n    field: string\r\n    label?: string\r\n    className?: string\r\n    props: IValue\r\n    additional?: string | JSX.Element\r\n    view: any\r\n    render: boolean\r\n}\r\n\r\n// tslint:disable-next-line: only-arrow-functions tslint:disable-next-line: no-shadowed-variable\r\nconst loadableComponent = function (component: Promise<any>) {\r\n    return Loadable({\r\n        loader: () => component,\r\n        loading() {\r\n            return null\r\n        },\r\n        // tslint:disable-next-line: no-shadowed-variable\r\n        render(loaded, props) {\r\n            let View\r\n            if (loaded.Group) {\r\n                View = loaded.Group\r\n            } else {\r\n                View = loaded.default\r\n            }\r\n            if (View) {\r\n                return <View {...props} />\r\n            }\r\n            return null\r\n        }\r\n    })\r\n}\r\n\r\ninterface IState {\r\n    childs: ILFormChild[]\r\n    vals: IValue\r\n}\r\n\r\nconst prefixClass = 'l_form'\r\n\r\nexport default class LForm extends Component<ILFormProps, IState> {\r\n\r\n    public static defaultProps: ILFormProps = {\r\n        // tslint:disable-next-line: object-literal-shorthand tslint:disable-next-line: only-arrow-functions\r\n        getItems: function (exFun: ILFormFun) {\r\n            return []\r\n        },\r\n        showType: 'column'\r\n    }\r\n\r\n    public state: any = {}\r\n\r\n    private items: ILFormItem[] = []\r\n\r\n    private lref: ILFormFun = {\r\n        getFieldValue: this.getFieldValue.bind(this),\r\n        cleanFieldValue: this.cleanFieldValue.bind(this),\r\n        setFieldValue: this.setFieldValue.bind(this),\r\n        showFieldElement: this.setFieldElement.bind(this, true),\r\n        hideFieldElement: this.setFieldElement.bind(this, false),\r\n        updateFieldProps: this.updateFieldProps.bind(this)\r\n    }\r\n\r\n    // tslint:disable-next-line: no-shadowed-variable\r\n    public constructor(props: ILFormProps) {\r\n        super(props)\r\n        const { getItems } = this.props\r\n        const vals: any = {}\r\n        const childs: ILFormChild[] = []\r\n        this.items = getItems(this.lref)\r\n        this.items.map((item: ILFormItem, index: number) => {\r\n            const field = item.field || `${item.component}_${index}`\r\n            const _porps: any = item.props || {}\r\n            switch (item.component) {\r\n                case 'Radio': {\r\n                    vals[field] = _porps.value\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                case 'Slider': {\r\n                    vals[field] = _porps.value || _porps.defaultValue || 0\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                case 'Colors': {\r\n                    vals[field] = _porps.initColor || ''\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                case 'LUpload': {\r\n                    vals[field] = _porps.fileList || (_porps.maxLength > 1 ? [] : '')\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                case 'ImagePicker': {\r\n                    vals[field] = _porps.value || []\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                case 'Map': {\r\n                    vals[field] = _porps.value || {}\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                default: {\r\n                    vals[field] = _porps.value || ''\r\n                }\r\n            }\r\n\r\n            childs.push({\r\n                type: item.component,\r\n                view: null,\r\n                field,\r\n                additional: item.additional,\r\n                label: item.label,\r\n                props: item.props || {},\r\n                render: isUndefined(item.render) ? true : item.render\r\n            })\r\n        })\r\n        this.state = {\r\n            vals,\r\n            childs\r\n        }\r\n    }\r\n\r\n    public componentWillReceiveProps(nextProps: ILFormProps) {\r\n        const { getItems } = nextProps\r\n        const { childs, vals } = this.state\r\n        const items = getItems(this.lref)\r\n        this.items = items\r\n        const newChild: ILFormChild[] = [...childs]\r\n        let status = false\r\n        items.forEach((item: ILFormItem, index: number) => {\r\n            // 如果组件不存在 则创建\r\n            if (!newChild[index]) {\r\n                status = true\r\n                const field = item.field || `${item.component}_${index}`\r\n                const _porps: IValue = item.props || {}\r\n                newChild[index] = {\r\n                    type: item.component,\r\n                    view: null,\r\n                    field,\r\n                    label: item.label,\r\n                    props: _porps,\r\n                    additional: item.additional,\r\n                    render: isUndefined(item.render) ? true : item.render\r\n                }\r\n                switch (item.component) {\r\n                    case 'Radio': {\r\n                        vals[field] = _porps.value\r\n                        // tslint:disable-next-line: align\r\n                    } break\r\n                    case 'Slider': {\r\n                        vals[field] = _porps.value || _porps.defaultValue || 0\r\n                        // tslint:disable-next-line: align\r\n                    } break\r\n                    case 'Colors': {\r\n                        vals[field] = _porps.initColor || ''\r\n                        // tslint:disable-next-line: align\r\n                    } break\r\n\r\n                    case 'LUpload': {\r\n                        vals[field] = _porps.fileList || (_porps.maxLength > 1 ? [] : '')\r\n                        // tslint:disable-next-line: align\r\n                    } break\r\n                    case 'ImagePicker': {\r\n                        vals[field] = _porps.value || []\r\n                        // tslint:disable-next-line: align\r\n                    } break\r\n                    case 'Map': {\r\n                        vals[field] = _porps.value || {}\r\n                        // tslint:disable-next-line: align\r\n                    } break\r\n                    default: {\r\n                        vals[field] = _porps.value || ''\r\n                    }\r\n                }\r\n                return\r\n            }\r\n            if (item.field === newChild[index].field) {\r\n                const newProps = omit(item.props || {}, ['value'])\r\n                newChild[index].props = {\r\n                    ...newChild[index].props,\r\n                    ...newProps\r\n                }\r\n                newChild[index].additional = item.additional\r\n            }\r\n        })\r\n        this.setState({\r\n            childs: newChild,\r\n            vals: { ...vals }\r\n        }, () => {\r\n            if (status) {\r\n                this.getTypeChild()\r\n            }\r\n        })\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const { childs } = this.state\r\n        const { className, showType } = this.props\r\n        return (\r\n            <div className={getClassName(`l_form ${showType}`, className)}>\r\n                {childs.map((item: ILFormChild, index: number) => {\r\n                    if (item.view && item.render) {\r\n                        return this.setTypeCom(this.items[index].component, item.view, item.props, item.field, index, item.className, item.label, item.additional)\r\n                    }\r\n                    return undefined\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.getTypeChild()\r\n    }\r\n\r\n    private getTypeChild() {\r\n        const { childs } = this.state\r\n        const newChilds = childs.map((item: ILFormChild, index: number) => {\r\n            if (item.view) {\r\n                if (item.type !== this.items[index].component) {\r\n                    const Com = this.typeChild(this.items[index].component)\r\n                    if (Com) {\r\n                        item.view = Com\r\n                    }\r\n                }\r\n            } else {\r\n                const Com = this.typeChild(this.items[index].component)\r\n                const field = item.field || `${item.type}_${index}`\r\n                if (Com) {\r\n                    item = {\r\n                        ...item,\r\n                        view: Com,\r\n                        type: item.type,\r\n                        field,\r\n                        label: item.label,\r\n                        props: item.props || {},\r\n                        render: isUndefined(item.render) ? true : item.render\r\n                    }\r\n                }\r\n            }\r\n            return item\r\n        })\r\n        this.setState({\r\n            childs: newChilds\r\n        })\r\n    }\r\n\r\n    // tslint:disable-next-line: no-shadowed-variable\r\n    private typeChild(component: component) {\r\n        switch (component) {\r\n            case 'Input': return loadableComponent(import('../Input'))\r\n            case 'Button': return loadableComponent(import('../Button'))\r\n            case 'Radio': return loadableComponent(import('../Radio/Group'))\r\n            case 'DatePicker': return loadableComponent(import('../DatePicker'))\r\n            case 'LUpload': return loadableComponent(import('../LUpload'))\r\n            case 'Label': return loadableComponent(import('../Label'))\r\n            case 'RadioGroup': return loadableComponent(import('../Radio/Group'))\r\n            case 'Select': return loadableComponent(import('antd/lib/select'))\r\n            case 'ImagePicker': return loadableComponent(import('../ImagePicker'))\r\n            case 'Map': return loadableComponent(import('../Map'))\r\n            case 'Textarea': return loadableComponent(import('../Textarea'))\r\n            case 'Colors': return loadableComponent(import('../Colors'))\r\n            case 'Carousel': return loadableComponent(import('../Carousel'))\r\n            case 'Slider': return loadableComponent(import('antd/lib/slider'))\r\n            default: return null\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line: no-shadowed-variable\r\n    private setTypeCom(component: component, View: any, props: props, field: string | undefined, key: number | string, className?: string, label?: string, additional?: string | JSX.Element): JSX.Element | null {\r\n        const { vals } = this.state\r\n        /// 得到field\r\n        field = field ? field : `${component}_${key}`\r\n        props = props || {}\r\n        switch (component) {\r\n            case 'Input': {\r\n                const _porps: any = props\r\n                const vProps = omit(props, ['value', 'onChange', 'onClose'])\r\n                // tslint:disable-next-line: only-arrow-functions\r\n                const onChange: any = _porps.onChange || function (e: ChangeEvent<HTMLButtonElement>) { }\r\n                // tslint:disable-next-line: only-arrow-functions\r\n                const onClose: any = _porps.onClose || function (val: string) { }\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list`, className)} key={field}>\r\n                        <div className=\"flex\">\r\n                            {label && <div className={getClassName(`${prefixClass}__list_label flex_justify`)}>{label}</div>}\r\n                            <div className=\"flex_1 flex_justify\">\r\n                                <View\r\n                                    {...vProps}\r\n                                    value={vals[field]}\r\n                                    onChange={this.setVal.bind(this, field, onChange)}\r\n                                    onClose={this.cleanInputVal.bind(this, field, onClose)}\r\n                                    key={field}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {additional && <div className={getClassName(`${prefixClass}__list_label flex_justify`)}>{additional}</div>}\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Textarea': {\r\n                const _porps: any = props\r\n                const vProps = omit(props, ['value', 'onChange'])\r\n                // tslint:disable-next-line: only-arrow-functions\r\n                const onChange: any = _porps.onChange || function (e: ChangeEvent<HTMLButtonElement>) { }\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list`, className)} key={field}>\r\n                        <div className=\"flex\" >\r\n                            {label && <div className={getClassName(`${prefixClass}__list_label`)}>{label}</div>}\r\n                            <div className=\"flex_1\">\r\n                                <View\r\n                                    {...vProps}\r\n                                    value={vals[field]}\r\n                                    onChange={this.setVal.bind(this, field, onChange)}\r\n                                    key={field}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {additional && <div className={getClassName(`${prefixClass}__list_label flex_justify`)}>{additional}</div>}\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Colors': {\r\n                const _porps: any = props\r\n                const vProps: any = omit(props, ['onChange'])\r\n                // tslint:disable-next-line: only-arrow-functions\r\n                const onChange: any = _porps.onChange || function (e: ChangeEvent<HTMLButtonElement>) { }\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list  flex`, className)} key={field}>\r\n                        {label && <div className={getClassName(`${prefixClass}__list_label flex_justify`)}>{label}</div>}\r\n                        <div className=\"flex_1 flex_justify\">\r\n                            <View\r\n                                {...vProps}\r\n                                initColor={vals[field]}\r\n                                onChange={this.setColors.bind(this, field, onChange)}\r\n                                key={field}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Carousel': {\r\n                const _porps: any = props\r\n                const vProps = omit(props, ['onChange'])\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list  flex`, className)} key={field}>\r\n                        {label && <div className={getClassName(`${prefixClass}__list_label flex_justify`)}>{label}</div>}\r\n                        <div className=\"flex_1\">\r\n                            <View\r\n                                {...vProps}\r\n                                key={field}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Slider': {\r\n                const vProps = omit(props, ['onChange', 'value'])\r\n                const _porps: any = props\r\n                const onChange: any = _porps.onChange\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list flex_justify`, className)} key={field}>\r\n                        <div className=\"flex\">\r\n                            {label && <div className={getClassName(`${prefixClass}__list_label flex_justify`)}>{label}</div>}\r\n                            <div className=\"flex_1\">\r\n                                <View\r\n                                    {...vProps}\r\n                                    key={field}\r\n                                    value={vals[field]}\r\n                                    onChange={this.setRVal.bind(this, field, onChange)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Button': {\r\n                const vProps = omit(props, [])\r\n                return <View {...vProps} key={field} />\r\n            }\r\n            case 'Radio': {\r\n                const vProps = omit(props, ['onChange', 'value'])\r\n                const _porps: any = props\r\n                const onChange: any = _porps.onChange\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list flex_justify`, className)} key={field}>\r\n                        <div className=\"flex\">\r\n                            {label && <div className={getClassName(`${prefixClass}__list_label`)}>{label}</div>}\r\n                            <div className=\"flex_1\">\r\n                                <View\r\n                                    {...vProps}\r\n                                    value={vals[field]}\r\n                                    onChange={this.setRVal.bind(this, field, onChange)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {additional && <div className={getClassName(`${prefixClass}__additional flex_justify`)}>{additional}</div>}\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Map': {\r\n                const vProps = omit(props, ['onLocationAddr'])\r\n                const _porps: any = props\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list  flex`, className)} key={field}>\r\n                        {label && <div className={getClassName(`${prefixClass}__list_label`)}>{label}</div>}\r\n                        <div className=\"flex_1\">\r\n                            <View\r\n                                onLocationAddr={this.steArrVal.bind(this, field, _porps.onLocationAddr)}\r\n                                {...vProps}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case 'DatePicker': {\r\n                const vProps = omit(props, ['onChange'])\r\n                const _porps: any = props\r\n                const onChange: any = _porps.onChange\r\n                return (\r\n                    <View\r\n                        {...vProps}\r\n                        key={field}\r\n                        value={vals[field] ? moment(vals[field]) : null}\r\n                        onChange={this.setDatePickerVal.bind(this, field, onChange)}\r\n                    />\r\n                )\r\n            }\r\n            case 'ImagePicker': {\r\n                const vProps = omit(props, ['value', 'onChange'])\r\n                const _porps: any = props\r\n                return (\r\n                    <div className={getClassName(`${prefixClass}__list  flex`, className)} key={field}>\r\n                        {label && <div className={getClassName(`${prefixClass}__list_label`)}>{label}</div>}\r\n                        <div className=\"flex_1\">\r\n                            <View\r\n                                value={vals[field]}\r\n                                onChange={this.steArrVal.bind(this, field, _porps.onChange)}\r\n                                {...vProps}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case 'LUpload': {\r\n                const vProps = omit(props, ['fileList', 'onChange'])\r\n                const _porps: any = props\r\n                const onChange: any = _porps.onChange\r\n                return (\r\n                    <div className=\"flex\" key={field}>\r\n                        {_porps.label && <div className={getClassName(`${prefixClass}__list_label`)}>{_porps.label}</div>}\r\n                        <View\r\n                            {...vProps}\r\n                            fileList={vals[field]}\r\n                            onChange={this.setUploadVal.bind(this, field, onChange)}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n            case 'RadioGroup': {\r\n                const vProps = omit(props, ['value', 'onChange'])\r\n                const _porps: any = props\r\n                const onChange: any = _porps.onChange\r\n                return (\r\n                    <div className={getClassName('l_form_radio_group flex', className)} key={field}>\r\n                        {_porps.label && <div className={getClassName('l_form_radio_group_label flex_justify')}>{_porps.label}</div>}\r\n                        <View\r\n                            {...vProps}\r\n                            value={vals[field]}\r\n                            onChange={this.setVal.bind(this, field, onChange)}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Select': {\r\n                const vProps = omit(props, ['value', 'onChange'])\r\n                const _porps: any = props\r\n                const onChange: any = _porps.onChange\r\n                return (\r\n                    <div className={getClassName('l_form_select flex', className)} key={field}>\r\n                        {_porps.label && <div className={getClassName('l_form_select_label flex_justify')}>{_porps.label}</div>}\r\n                        <View\r\n                            {...vProps}\r\n                            value={vals[field]}\r\n                            className=\"flex_1\"\r\n                            onChange={this.setRVal.bind(this, field, onChange)}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n            case 'Label': {\r\n                const vProps = omit(props, ['value', 'onChange', 'className'])\r\n                const _porps: any = props\r\n                return (\r\n                    <div className={getClassName(`l_form_label flex`, _porps.className)} key={field}>\r\n                        {_porps.label && <div className=\"flex_justify\" style={{ marginRight: '0.4rem' }}>{_porps.label}</div>}\r\n                        <div className=\"flex_1 flex_justify\">\r\n                            <View\r\n                                {...vProps}\r\n                                style={{ paddingTop: '0', paddingBottom: '0' }}\r\n                                key={field}\r\n                            >\r\n                                {_porps.value}\r\n                            </View>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            default: return null\r\n        }\r\n    }\r\n\r\n    private setUploadVal(field: string, cb: (file: ILUploadChangeParam) => void, file: ILUploadChangeParam) {\r\n        const { vals } = this.state\r\n        vals[field] = file.fileList\r\n        if (isFunction(cb)) {\r\n            cb(file)\r\n        }\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private steArrVal(field: string, cb: () => void, val: any) {\r\n        const { vals } = this.state\r\n        vals[field] = val\r\n        if (isFunction(cb)) {\r\n            cb(val)\r\n        }\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private setColors(field: string, cb: (color: ColorResult, e: ChangeEvent<HTMLButtonElement>) => {}, color: ColorResult, e: ChangeEvent<HTMLButtonElement>) {\r\n        const { vals } = this.state\r\n        vals[field] = color.hex\r\n        if (isFunction(cb)) {\r\n            cb(color, e)\r\n        }\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private setVal(field: string, cb: (e: ChangeEvent<HTMLButtonElement>) => {}, e: ChangeEvent<HTMLButtonElement>) {\r\n        const { vals } = this.state\r\n        vals[field] = e.target.value\r\n        if (isFunction(cb)) {\r\n            cb(e)\r\n        }\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private setDatePickerVal(field: string, cb: (date: any, dateString: string) => void, val: any, dateString: string) {\r\n        const { vals } = this.state\r\n        vals[field] = dateString\r\n        if (isFunction(cb)) {\r\n            cb(val, dateString)\r\n        }\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private setRVal(field: string, cb: (val?: any) => void, val: any) {\r\n        const { vals } = this.state\r\n        vals[field] = val\r\n        if (isFunction(cb)) {\r\n            cb(val)\r\n        }\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private cleanInputVal(field: string, cb: (val: string) => {}) {\r\n        const { vals } = this.state\r\n        vals[field] = ''\r\n        if (isFunction(cb)) {\r\n            cb('')\r\n        }\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private getComVal(item: ILFormChild, field: string) {\r\n        const { vals } = this.state\r\n        switch (item.type) {\r\n            case 'LUpload': {\r\n                const _props: any = item.props || {}\r\n                const baseUrl: string = _props.baseUrl || ''\r\n                if (_props.maxLength === 1) {\r\n                    // tslint:disable-next-line: no-string-literal\r\n                    const url: string = (vals[field][0] && (vals[field][0]['url'] || vals[field][0]['response']['data'])) || ''\r\n                    if (baseUrl && hash(url, baseUrl)) {\r\n                        return url.substring(baseUrl.length)\r\n                    } else {\r\n                        return url\r\n                    }\r\n                } else {\r\n                    return vals[field].map((i: any) => {\r\n                        // tslint:disable-next-line: no-string-literal\r\n                        const url = i['url'] || i['response']['data']\r\n                        if (baseUrl && hash(url, baseUrl)) {\r\n                            return url.substring(baseUrl.length)\r\n                        } else {\r\n                            return url\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            default: return vals[field]\r\n        }\r\n    }\r\n\r\n    private getFieldValue(params?: string[]): IValue {\r\n        const { childs } = this.state\r\n        const val: IValue = {}\r\n        childs.map((item: ILFormChild, index: number) => {\r\n            if (params) {\r\n                params.map((i: string) => {\r\n                    if (item.field === i) {\r\n                        val[i] = this.getComVal(item, i)\r\n                    }\r\n                })\r\n            } else {\r\n                val[item.field] = this.getComVal(item, item.field)\r\n            }\r\n        })\r\n        return val\r\n    }\r\n\r\n    private cleanFieldValue() {\r\n        const { vals } = this.state\r\n        this.items.map((item: ILFormItem, index: number) => {\r\n            const field = item.field || `${item.component}_${index}`\r\n            // tslint:disable-next-line: no-shadowed-variable\r\n            const props: any = item.props || {}\r\n            switch (item.component) {\r\n                case 'Radio': {\r\n                    vals[field] = props.value\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                case 'LUpload': {\r\n                    vals[field] = []\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                case 'ImagePicker': {\r\n                    vals[field] = props.value ? props.value : []\r\n                    // tslint:disable-next-line: align\r\n                } break\r\n                default: {\r\n                    vals[field] = props.value ? props.value : ''\r\n                }\r\n            }\r\n        })\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private setFieldValue(params: IValue) {\r\n        const { vals } = this.state\r\n        this.items.map((item: ILFormItem, index: number) => {\r\n            const field = item.field || `${item.component}_${index}`\r\n            if (params[field]) {\r\n                switch (item.component) {\r\n                    case 'LUpload': {\r\n                        const _props: any = item.props || {}\r\n                        const baseUrl = _props.baseUrl || ''\r\n                        if (_props.maxLength === 1) {\r\n                            vals[field] = [{\r\n                                uid: '-1',\r\n                                name: 'xxx.png',\r\n                                status: 'done',\r\n                                url: baseUrl + params[field],\r\n                            }]\r\n                        } else {\r\n                            // tslint:disable-next-line: no-shadowed-variable\r\n                            vals[field] = params[field].map((i: string, index: number) => {\r\n                                return {\r\n                                    uid: `${index}`,\r\n                                    name: `reload_${index}.png`,\r\n                                    status: 'done',\r\n                                    url: baseUrl + i,\r\n                                }\r\n                            })\r\n                        }\r\n                        // tslint:disable-next-line: align\r\n                    } break\r\n                    default: {\r\n                        vals[field] = params[field]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        this.setState({\r\n            vals\r\n        })\r\n    }\r\n\r\n    private updateFieldProps(params: IValue = {}) {\r\n        const { childs } = this.state\r\n        const keys = Object.keys(params)\r\n        const newChilds = childs.map((i: ILFormChild) => {\r\n            if (hash(params, i.field)) {\r\n                i.props = {\r\n                    ...i.props,\r\n                    ...params[i.field]\r\n                }\r\n            }\r\n            return i\r\n        })\r\n        this.setState({\r\n            childs: newChilds\r\n        })\r\n    }\r\n\r\n    private setFieldElement(status: boolean, params: string[]) {\r\n        const { childs } = this.state\r\n        const newChilds = childs.map((i: ILFormChild) => {\r\n            if (hash(params, i.field)) {\r\n                i.render = status\r\n            }\r\n            return i\r\n        })\r\n        this.setState({\r\n            childs: newChilds\r\n        })\r\n    }\r\n}\r\n","\n    (window.__NEXT_P=window.__NEXT_P||[]).push([\"/\", function() {\n      var page = require(\"F:\\\\www\\\\Muka_OS\\\\pages\\\\index.tsx\")\n      if(module.hot) {\n        module.hot.accept(\"F:\\\\www\\\\Muka_OS\\\\pages\\\\index.tsx\", function() {\n          if(!next.router.components[\"/\"]) return\n          var updatedPage = require(\"F:\\\\www\\\\Muka_OS\\\\pages\\\\index.tsx\")\n          next.router.update(\"/\", updatedPage.default || updatedPage)\n        })\n      }\n      return { page: page.default || page }\n    }]);\n  ","\"use strict\";\n\nvar __importStar = void 0 && (void 0).__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _1 = __importStar(require(\"./\")),\n    next = _1;\n\nvar event_source_polyfill_1 = __importDefault(require(\"./event-source-polyfill\"));\n\nvar on_demand_entries_client_1 = __importDefault(require(\"./on-demand-entries-client\"));\n\nvar webpack_hot_middleware_client_1 = __importDefault(require(\"./webpack-hot-middleware-client\")); // Temporary workaround for the issue described here:\n// https://github.com/zeit/next.js/issues/3775#issuecomment-407438123\n// The runtimeChunk doesn't have dynamic import handling code when there hasn't been a dynamic import\n// The runtimeChunk can't hot reload itself currently to correct it when adding pages using on-demand-entries\n\n\nimport('./noop'); // Support EventSource on Internet Explorer 11\n\nif (!window.EventSource) {\n  window.EventSource = event_source_polyfill_1.default;\n}\n\nvar _window = window,\n    assetPrefix = _window.__NEXT_DATA__.assetPrefix;\nvar prefix = assetPrefix || '';\nvar webpackHMR = webpack_hot_middleware_client_1.default({\n  assetPrefix: prefix\n});\nwindow.next = next;\n\n_1.default({\n  webpackHMR: webpackHMR\n}).then(function (emitter) {\n  on_demand_entries_client_1.default({\n    assetPrefix: prefix\n  });\n  var lastScroll;\n  emitter.on('before-reactdom-render', function (_ref) {\n    var Component = _ref.Component,\n        ErrorComponent = _ref.ErrorComponent;\n\n    // Remember scroll when ErrorComponent is being rendered to later restore it\n    if (!lastScroll && Component === ErrorComponent) {\n      var _window2 = window,\n          pageXOffset = _window2.pageXOffset,\n          pageYOffset = _window2.pageYOffset;\n      lastScroll = {\n        x: pageXOffset,\n        y: pageYOffset\n      };\n    }\n  });\n  emitter.on('after-reactdom-render', function (_ref2) {\n    var Component = _ref2.Component,\n        ErrorComponent = _ref2.ErrorComponent;\n\n    if (lastScroll && Component !== ErrorComponent) {\n      // Restore scroll after ErrorComponent was replaced with a page component by HMR\n      var _lastScroll = lastScroll,\n          x = _lastScroll.x,\n          y = _lastScroll.y;\n      window.scroll(x, y);\n      lastScroll = null;\n    }\n  });\n}).catch(function (err) {\n  console.error('Error was not caught', err);\n});","import { Component } from 'react'\r\nimport { Carousel, Image } from 'components'\r\nimport Axios from 'axios'\r\n\r\ninterface IState {\r\n    lists: any[]\r\n    selected: number\r\n}\r\n\r\nexport default class Index extends Component<any, any> {\r\n\r\n    public state: IState = {\r\n        lists: [],\r\n        selected: 0\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const { lists, selected } = this.state\r\n        return (\r\n            <Carousel autoplay selected={selected} time={5000} style={{ width: '100vw', height: '100vh' }} dots={false} >\r\n                {\r\n                    lists.map((i: any, index: number) => {\r\n                        return (\r\n                            <div style={{ position: 'relative', width: '100%', height: '100%' }} key={index}>\r\n                                <Image src={'http://www.snplay.top:8080/' + i.url} style={{ width: 'auto', height: '100%', display: 'block', margin: '0 auto' }} />\r\n                                <div className=\"flex_center\" style={{ position: 'absolute', height: '70px', width: '100%', bottom: 0, left: 0, background: 'rgba(0,0,0,0.5)', fontSize: '20px', color: '#fff' }}>CN: {i.msg}</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </Carousel>\r\n        )\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.getData()\r\n    }\r\n\r\n    private getData = async () => {\r\n        Axios({\r\n            url: 'http://www.snplay.top:8080/fs/getimages',\r\n            // url: 'http://localhost:4000/api/fs/getimages',\r\n            method: 'POST'\r\n        }).then((data) => {\r\n            this.setState({\r\n                lists: data.data.data\r\n            })\r\n        })\r\n        this.reload()\r\n    }\r\n\r\n    private reload = () => {\r\n        setInterval(() => {\r\n            Axios({\r\n                url: 'http://www.snplay.top:8080/fs/getimages',\r\n                // url: 'http://localhost:4000/api/fs/getimages',\r\n                method: 'POST'\r\n            }).then((data) => {\r\n                const { lists } = this.state\r\n                if (lists.length !== data.data.data.length) {\r\n                    const newData = data.data.data.filter((i: any) => {\r\n                        const val = lists.find((k) => {\r\n                            return i.id === k.id\r\n                        })\r\n                        return val ? false : true\r\n                    })\r\n                    const length = lists.length - 1\r\n                    this.setState({\r\n                        lists: [\r\n                            ...lists,\r\n                            ...newData,\r\n                        ],\r\n                        selected: length\r\n                    })\r\n                }\r\n            })\r\n        }, 10000)\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAEA;AACA;AA0DA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAjBA;AAmBA;AACA;AAMA;AACA;AACA;;;;;AAwBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AA3BA;AACA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AAFA;AAjDA;AAqDA;AACA;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AA5BA;AACA;AA6BA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAiBA;AACA;;;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AALA;AASA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAJA;AAQA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAJA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAFA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAJA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAHA;AAOA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AADA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAHA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAHA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAJA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AAAA;AAAA;AA1OA;AA4OA;;;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAxBA;AA0BA;;;AAEA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;;;;AAjrBA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChtFA;AAEA;AACA;AAMA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAFA;AACA;;;;;AA0BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AALA;AAOA;AACA;AACA;AACA;AACA;;;;;;AA9DA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;;;AAEA;AACA;AACA;;;;AA3BA;AACA;;;;;;;;;;;;;;;;;A","sourceRoot":""}