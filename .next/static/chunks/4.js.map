{"version":3,"file":"static/chunks/4.js","sources":["webpack:///./components/lib/Map/index.tsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport load from 'load-script'\r\nimport { isFunction, browser } from 'muka'\r\nimport { getClassName } from '../utils'\r\n\r\ndeclare const qq: any\r\n\r\nexport interface IMapProps {\r\n    type: 'tMap' | 'bMap' | 'aMap'\r\n    width?: string | number\r\n    height?: string | number\r\n    apiKey: string\r\n    // 地址参数追加\r\n    urlParams?: string\r\n    // 是否定位\r\n    location?: boolean\r\n    // 应用名称\r\n    appName?: string\r\n    // 初始定位\r\n    initLatLng?: {\r\n        lat: number\r\n        lng: number\r\n    }\r\n    extendUrls?: string[]\r\n    onLocationError?: () => void\r\n    onLocationAddr?: (position: any) => void\r\n    onLoadUrlError?: () => void\r\n}\r\n\r\ninterface ILocation {\r\n    latitude: number\r\n    longitude: number\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\ninterface IState {\r\n}\r\n\r\nconst mapUrl: any = {\r\n    tMap: 'https://map.qq.com/api/js?v=2.exp&key=',\r\n    bMap: '',\r\n    aMap: ''\r\n}\r\n\r\nexport const setMapUrlSource = (params: any) => {\r\n    const keys = Object.keys(mapUrl)\r\n    keys.map((i: any) => {\r\n        mapUrl[i] = params[i]\r\n    })\r\n}\r\n\r\nexport default class Map extends Component<IMapProps, IState> {\r\n\r\n    public static defaultProps: IMapProps = {\r\n        type: 'tMap',\r\n        height: 600,\r\n        width: 800,\r\n        apiKey: '',\r\n        extendUrls: []\r\n    }\r\n\r\n    public state: IState = {}\r\n\r\n    private node: Element | null = null\r\n\r\n    private location?: ILocation = undefined\r\n\r\n    private geolocation: any = null\r\n\r\n    private geocoder: any = null\r\n\r\n    private events: any[] = []\r\n\r\n    public componentWillMount() {\r\n\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { onLocationError, initLatLng, onLocationAddr } = this.props\r\n        let dragendEventStatus = true\r\n        this.getScriptFile().then(() => {\r\n            const win: any = window\r\n            win.tMapInit = async () => {\r\n                const posLatLng = initLatLng ? new qq.maps.LatLng(initLatLng.lat, initLatLng.lng) : new qq.maps.LatLng(39.916527, 116.397128)\r\n                const map = new qq.maps.Map(this.node, {\r\n                    zoom: 16,\r\n                    center: posLatLng\r\n                })\r\n                const geocoder = new qq.maps.Geocoder()\r\n                geocoder.setComplete((result: any) => {\r\n                    if (isFunction(onLocationAddr)) {\r\n                        onLocationAddr(result.detail)\r\n                    }\r\n                    if (dragendEventStatus) {\r\n                        map.setCenter(result.detail.location)\r\n                        const marker = new qq.maps.Marker({\r\n                            map,\r\n                            draggable: true,\r\n                            position: result.detail.location\r\n                        })\r\n                        qq.maps.event.addListener(marker, 'dragend', (event: any) => {\r\n                            const latLng = new qq.maps.LatLng(event.latLng.lat, event.latLng.lng)\r\n                            geocoder.getAddress(latLng)\r\n                        })\r\n                        dragendEventStatus = false\r\n                    }\r\n                })\r\n                // tslint:disable-next-line: only-arrow-functions\r\n                geocoder.setError(function () {\r\n                    alert('出错了，请输入正确的经纬度！！！')\r\n                })\r\n                if (location) {\r\n                    this.getLocation().then((data) => {\r\n                        let lat = data.lat\r\n                        let lng = data.lng\r\n                        if (!browser.isMobile) {\r\n                            lat = lat + 0.008081\r\n                            lng = lng - 0.005184\r\n                        }\r\n                        const latLng = new qq.maps.LatLng(lat, lng)\r\n                        geocoder.getAddress(latLng)\r\n                    }).catch(() => {\r\n                        if (isFunction(onLocationError)) {\r\n                            onLocationError()\r\n                        }\r\n                    })\r\n                } else {\r\n                    if (isFunction(onLocationAddr)) {\r\n                        onLocationAddr({\r\n                            lat: initLatLng ? initLatLng.lat : 39.916527,\r\n                            lng: initLatLng ? initLatLng.lng : 116.397128\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n        }).catch(() => {\r\n            const { onLoadUrlError } = this.props\r\n            if (isFunction(onLoadUrlError)) {\r\n                onLoadUrlError()\r\n            }\r\n        })\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const { width, height } = this.props\r\n        return (\r\n            <div className={getClassName(`map`)} style={{ height, width }} ref={(e) => this.node = e} />\r\n        )\r\n    }\r\n\r\n    private getScriptFile() {\r\n        const { extendUrls, type, apiKey, urlParams } = this.props\r\n        const urls = [mapUrl[type] + apiKey + (urlParams ? '&libraries=' + urlParams : '') + '&callback=tMapInit', ...(extendUrls || [])]\r\n        if (type === 'tMap') {\r\n            urls.push('https://3gimg.qq.com/lightmap/components/geolocation/geolocation.min.js')\r\n        }\r\n        const promiseAll = urls.map((i) => {\r\n            return new Promise((resolve, reject) => {\r\n                load(i, (err: any) => {\r\n                    if (err) {\r\n                        reject(err)\r\n                    } else {\r\n                        resolve()\r\n                    }\r\n                })\r\n            })\r\n        })\r\n        return Promise.all(promiseAll)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * 使用地图插件获得精准位置\r\n     *\r\n     */\r\n\r\n    private getLocation(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const { apiKey, type, appName } = this.props\r\n            if (type === 'tMap') {\r\n                this.geolocation = new qq.maps.Geolocation(apiKey, appName || 'mukaMap')\r\n                this.geolocation.getLocation((position: any) => {\r\n                    resolve(position)\r\n                }, (e: any) => {\r\n                    reject(e)\r\n                }, {\r\n                        timeout: 8000\r\n                    })\r\n                return\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAmCA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;;;AAIA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AApDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;;;;AA7IA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;A","sourceRoot":""}