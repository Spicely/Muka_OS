{"version":3,"file":"static/chunks/63.js","sources":["webpack:///./components/lib/Textarea/index.tsx"],"sourcesContent":["import React, { Component, TextareaHTMLAttributes, ChangeEvent } from 'react'\r\nimport { isFunction, omit } from 'muka'\r\nimport { getClassName } from '../utils'\r\n\r\nexport interface ITextareaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n    className?: string\r\n    showMaxLength?: boolean\r\n}\r\n\r\ninterface IState {\r\n    val: string\r\n}\r\n\r\nexport default class Textarea extends Component<ITextareaProps, IState> {\r\n\r\n    public state: IState = {\r\n        val: ''\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const { className, maxLength, showMaxLength } = this.props\r\n        const { val } = this.state\r\n        const props = omit(this.props, ['className', 'onChange', 'showMaxLength'])\r\n        return (\r\n            <div className={getClassName(`textarea`, className)} >\r\n                <textarea {...props} onChange={this.handleChange}>\r\n                </textarea>\r\n                {(showMaxLength && maxLength) ? <div className={getClassName('textarea_max_length flex_justify')}>{val.length}/{maxLength}</div> : null}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const { onChange } = this.props\r\n        this.setState({\r\n            val: e.target.value\r\n        })\r\n        if (isFunction(onChange)) {\r\n            onChange(e)\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAUA;;;;;;;;;;;;;;;;;;AAEA;AACA;AADA;AACA;AAgBA;AAAA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;;;;AAjBA;AACA;;;;;A","sourceRoot":""}