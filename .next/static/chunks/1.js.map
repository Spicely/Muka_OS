{"version":3,"file":"static/chunks/1.js","sources":["webpack:///./components/lib/ImagePicker/cropImage.ts","webpack:///./components/lib/ImagePicker/index.tsx"],"sourcesContent":["import { ICroppedArea } from './index'\r\nconst createImage = (url: string) =>\r\n    new Promise((resolve, reject) => {\r\n        const image = new Image()\r\n        image.addEventListener('load', () => resolve(image))\r\n        image.addEventListener('error', error => reject(error))\r\n        image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\r\n        image.src = url\r\n    })\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n * @param {File} image - Image File url\r\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\r\n */\r\nexport default async function getCroppedImg(imageSrc: string, pixelCrop: ICroppedArea) {\r\n    const image: any = await createImage(imageSrc)\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = pixelCrop.width\r\n    canvas.height = pixelCrop.height\r\n    const ctx = canvas.getContext('2d')\r\n\r\n    if (ctx) {\r\n        ctx.drawImage(\r\n            image,\r\n            pixelCrop.x,\r\n            pixelCrop.y,\r\n            pixelCrop.width,\r\n            pixelCrop.height,\r\n            0,\r\n            0,\r\n            pixelCrop.width,\r\n            pixelCrop.height\r\n        )\r\n    }\r\n\r\n    // As Base64 string\r\n    return canvas.toDataURL('image/jpeg')\r\n\r\n    // As a blob\r\n    // return new Promise((resolve) => {\r\n    //     canvas.toBlob(file => {\r\n    //         resolve(URL.createObjectURL(file))\r\n    //     }, 'image/jpeg')\r\n    // })\r\n}\r\n","import React, { Component, ChangeEvent } from 'react'\r\nimport Cropper from 'react-easy-crop'\r\nimport { isFunction, isString } from 'muka'\r\nimport CropImage from './cropImage'\r\nimport Icon, { iconType } from '../Icon'\r\nimport Dialog from '../Dialog'\r\nimport Image from '../Image'\r\nimport { getClassName } from '../utils'\r\n\r\nexport interface ICroppedArea {\r\n    height: number\r\n    width: number\r\n    x: number\r\n    y: number\r\n}\r\n\r\ninterface IIconStyle {\r\n    color?: string,\r\n    fontSize?: string\r\n}\r\n\r\ninterface ICropProps {\r\n    cropShape?: 'rect' | 'round'\r\n    cropSize?: {\r\n        width?: number\r\n        height?: number\r\n    }\r\n    showGrid?: boolean\r\n    crossOrigin?: string\r\n}\r\n\r\ninterface ICrop {\r\n    x: number\r\n    y: number\r\n}\r\n\r\ninterface IFile {\r\n    url: string | ArrayBuffer | null\r\n    file?: File\r\n}\r\n\r\nexport interface IImagePickerProps {\r\n    className?: string\r\n    disabled?: boolean\r\n    icon?: iconType | JSX.Element\r\n    iconStyle?: IIconStyle\r\n    multiple?: boolean\r\n    onChange?: (files: IFile[]) => void\r\n    crop?: boolean\r\n    cropProps?: ICropProps\r\n    maxLength?: number\r\n    value?: IFile[]\r\n}\r\n\r\ninterface IState {\r\n    files: IFile[]\r\n    cropXY: ICrop,\r\n    image: string\r\n    aspect: number\r\n    zoom: number\r\n    visible: boolean\r\n}\r\n\r\nconst prefixClass = 'image_picker'\r\n\r\nexport default class ImagePicker extends Component<IImagePickerProps, IState> {\r\n\r\n    public static defaultProps: IImagePickerProps = {\r\n        icon: 'md-add',\r\n        iconStyle: {\r\n            fontSize: '28px',\r\n            color: '#bcbcbc'\r\n        }\r\n    }\r\n\r\n    public state: IState = {\r\n        files: [],\r\n        cropXY: { x: 0, y: 0 },\r\n        image: '',\r\n        aspect: 4 / 3,\r\n        zoom: 1,\r\n        visible: false\r\n    }\r\n\r\n    private filesList: IFile[] = []\r\n\r\n    private index: number = 0\r\n\r\n    private fileName: string = ''\r\n\r\n    private croppedAreaPixels: ICroppedArea = {\r\n        height: 0,\r\n        width: 0,\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    private croppedArea: ICroppedArea = {\r\n        height: 0,\r\n        width: 0,\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { value } = this.props\r\n        const { files } = this.state\r\n        this.setValue(value, files)\r\n    }\r\n\r\n    public componentWillReceiveProps(nextProps: IImagePickerProps) {\r\n        const { files } = this.state\r\n        this.setValue(nextProps.value, files)\r\n    }\r\n\r\n    private fileNode: HTMLInputElement | null = null\r\n\r\n    public render(): JSX.Element {\r\n        const { className, multiple, crop, cropProps, disabled } = this.props\r\n        const { files, image, cropXY, aspect, zoom, visible } = this.state\r\n        return (\r\n            <div className={getClassName(`${prefixClass}`, className)}>\r\n                <input type=\"file\" style={{ display: 'none' }} ref={(e) => this.fileNode = e} multiple={crop ? false : multiple} onChange={this.handleFileChange} />\r\n                {\r\n                    files.map((i: IFile, index: number) => {\r\n                        return (\r\n                            <div className={getClassName(`${prefixClass}__add`)} key={`$picker_${index}`}>\r\n                                <div className={getClassName(`${prefixClass}__add_box flex_center picker_img`)}>\r\n                                    <Image className={getClassName(`${prefixClass}__add_box_img`)} src={i.url} />\r\n                                </div>\r\n                                {\r\n                                    !disabled && <Icon icon=\"md-close-circle\" className={getClassName(`${prefixClass}__add_close`)} fontSize=\"16px\" onClick={this.handleFileRemove.bind(this, index)} />\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {this.getAddBox()}\r\n                {(crop && !disabled) && <Dialog\r\n                    visible={visible}\r\n                    onClose={this.handleCropClose}\r\n                    onOk={this.handleOk}\r\n                >\r\n                    <Cropper\r\n                        {...cropProps}\r\n                        image={image}\r\n                        crop={cropXY}\r\n                        aspect={aspect}\r\n                        zoom={zoom}\r\n                        classes={{\r\n                            containerClassName: getClassName(`${prefixClass}_crop__container`)\r\n                        }}\r\n                        style={{\r\n                            containerStyle: {\r\n                                position: 'relative',\r\n                                height: '500px'\r\n                            }\r\n                        }}\r\n                        onCropComplete={this.onCropComplete}\r\n                        onCropChange={this.onCropChange}\r\n                        onZoomChange={this.onZoomChange}\r\n                    />\r\n                </Dialog>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private getAddBox(): JSX.Element | undefined {\r\n        const { icon, iconStyle, maxLength } = this.props\r\n        const { files } = this.state\r\n        if (!maxLength || maxLength > files.length) {\r\n            return (\r\n                <div className={getClassName(`${prefixClass}__add `)} onClick={this.handleClick}>\r\n                    <div className={getClassName(`${prefixClass}__add_box flex_center`)}>\r\n                        {isString(icon) ? <Icon icon={icon} fontSize={iconStyle && iconStyle.fontSize} color={iconStyle && iconStyle.color} /> : icon}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    private setValue(value: IFile[] | undefined, files: IFile[]) {\r\n        if (value) {\r\n            let status: boolean = false\r\n            this.filesList = [...value]\r\n            if (value.length && value.length === files.length) {\r\n                status = value.every((i, index: number) => {\r\n                    if (!files[index]) {\r\n                        return false\r\n                    }\r\n                    return i.url === files[index].url\r\n                })\r\n            }\r\n            if (!status) {\r\n                this.setState({\r\n                    files: value\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleClick = () => {\r\n        if (this.fileNode) {\r\n            this.fileNode.click()\r\n        }\r\n    }\r\n\r\n    private onCropChange = (crop: ICrop) => {\r\n        this.setState({ cropXY: crop })\r\n    }\r\n\r\n    private onCropComplete = (croppedArea: ICroppedArea, croppedAreaPixels: ICroppedArea) => {\r\n        this.croppedArea = croppedArea\r\n        this.croppedAreaPixels = croppedAreaPixels\r\n    }\r\n\r\n    private onZoomChange = (zoom: number) => {\r\n        this.setState({ zoom })\r\n    }\r\n\r\n    private handleCropClose = (val: boolean) => {\r\n        this.setState({\r\n            visible: val\r\n        })\r\n    }\r\n\r\n    private handleFileRemove(index: number) {\r\n        const { onChange } = this.props\r\n        const { files } = this.state\r\n        files.splice(index, 1)\r\n        this.filesList.splice(index, 1)\r\n        if (isFunction(onChange)) {\r\n            onChange(files)\r\n        }\r\n        this.setState({\r\n            files: [...files],\r\n        })\r\n    }\r\n\r\n    private dataURLtoFile(dataurl: string, filename: string) {\r\n        const arr = dataurl.split(',')\r\n        const mime = ((arr[0] || '').match(/:(.*?);/) || [])[1]\r\n        const bstr = atob(arr[1])\r\n        let n = bstr.length\r\n        const u8arr = new Uint8Array(n)\r\n        while (n--) {\r\n            u8arr[n] = bstr.charCodeAt(n)\r\n        }\r\n        const blob: any = new Blob([u8arr], { type: mime })\r\n        if (/Edge/.test(navigator.userAgent)) {\r\n            blob.lastModifiedDate = new Date()\r\n            blob.name = filename\r\n            blob.filename = filename\r\n            return blob\r\n        } else {\r\n            const file = new File([blob], filename)\r\n            return file\r\n        }\r\n    }\r\n\r\n    private handleOk = async () => {\r\n        const { onChange } = this.props\r\n        const { image } = this.state\r\n        const croppedImage: any = await CropImage(image, this.croppedAreaPixels)\r\n        this.filesList.push({\r\n            file: this.dataURLtoFile(croppedImage, this.fileName),\r\n            url: croppedImage\r\n        })\r\n        this.setState({\r\n            visible: false,\r\n            files: [...this.filesList]\r\n        }, () => {\r\n            if (isFunction(onChange)) {\r\n                onChange(this.filesList)\r\n            }\r\n        })\r\n    }\r\n\r\n    private readFile(file: File, index: number) {\r\n        const { files } = this.state\r\n        if (files[index] && file === files[index].file) {\r\n            return undefined\r\n        }\r\n        const reader = new FileReader()\r\n        reader.readAsDataURL(file)\r\n        return new Promise((resolve) => {\r\n            reader.onload = () => {\r\n                const { crop } = this.props\r\n                if (!crop) {\r\n                    this.filesList[index].url = reader.result\r\n                    this.setState({\r\n                        files: [...this.filesList]\r\n                    })\r\n                } else {\r\n                    let image: any = ''\r\n                    let visible: boolean = false\r\n                    if (reader.result) {\r\n                        image = reader.result\r\n                        visible = true\r\n                    }\r\n                    this.setState({\r\n                        image,\r\n                        visible\r\n                    })\r\n                }\r\n                resolve()\r\n            }\r\n        })\r\n    }\r\n\r\n    private handleFileChange = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        const { onChange } = this.props\r\n        if (e.currentTarget.files) {\r\n            const { crop } = this.props\r\n            const { files } = this.state\r\n            const length = files.length\r\n            const fileList = e.currentTarget.files\r\n            if (crop) {\r\n                this.index = length\r\n                const _file = fileList.item(0)\r\n                if (_file) {\r\n                    this.fileName = _file.name\r\n                    await this.readFile(_file, length)\r\n                }\r\n            } else {\r\n                const { maxLength } = this.props\r\n                const fileLength = maxLength ? maxLength - length : fileList.length\r\n                if (fileLength <= 0) {\r\n                    return\r\n                }\r\n                for (let i = 0; i < fileLength; i++) {\r\n                    const _file = fileList.item(i)\r\n                    if (_file) {\r\n                        this.filesList.push({\r\n                            file: _file,\r\n                            url: ''\r\n                        })\r\n                        await this.readFile(_file, length + i)\r\n                    }\r\n                }\r\n            }\r\n            if (isFunction(onChange)) {\r\n                onChange(this.filesList)\r\n            }\r\n            // e.target.value = ''\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAPA;AASA;;;;;;;AAKA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AArBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAEA;AACA;AACA;AACA;AACA;AAwDA;AACA;AACA;;;;;;;;;;;;;;;;;;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAiBA;AACA;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;AAmCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAiDA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AAUA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAeA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAoBA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AACA;AAtBA;AAAA;AAAA;AAAA;AACA;AAsBA;AACA;AACA;AAFA;AACA;AAxBA;AAAA;AACA;AADA;AAoBA;AApBA;AAAA;AACA;AADA;AA+BA;AACA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAhNA;AAAA;AAAA;AAGA;AACA;;;AAEA;AAAA;AAEA;AACA;;;AAIA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAjBA;AAsBA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AA2BA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;;;;AApPA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAFA;AACA;;;;;A","sourceRoot":""}