{"version":3,"file":"6.js","sources":["webpack:///./components/lib/Colors/index.tsx","webpack:///./components/lib/Colors/mask.tsx"],"sourcesContent":["import React, { Component, ChangeEvent, MouseEvent } from 'react'\r\nimport { SketchPicker, ChromePicker, BlockPicker, GithubPicker, TwitterPicker, HuePicker, AlphaPicker, CirclePicker, SliderPicker, CompactPicker, MaterialPicker, SwatchesPicker, ColorResult } from 'react-color'\r\nimport { isFunction } from 'muka'\r\nimport Mask from './mask'\r\nimport { getClassName } from '../utils'\r\nexport { ColorResult } from 'react-color'\r\n\r\nexport type colorsType = 'sketch' | 'chrome' | 'block' | 'github' | 'twitter' | 'hue' | 'alpha' | 'circle' | 'slider' | 'compact' | 'material' | 'swatches'\r\n\r\nexport interface IColorsProps {\r\n    className?: string\r\n    type?: colorsType\r\n    initColor?: string\r\n    onChange?: (color: ColorResult, event: ChangeEvent) => void\r\n    [name: string]: any\r\n}\r\n\r\ninterface IState {\r\n    color: string\r\n    visible: boolean\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nconst prefixClass = 'colors'\r\n\r\nexport default class Colors extends Component<IColorsProps, IState> {\r\n\r\n    constructor(props: IColorsProps) {\r\n        super(props)\r\n        if (props.initColor) {\r\n            this.state.color = props.initColor\r\n        }\r\n    }\r\n\r\n    public static defaultProps: IColorsProps = {\r\n        type: 'chrome'\r\n    }\r\n\r\n    public state: IState = {\r\n        color: '#0693e3',\r\n        visible: false,\r\n        left: 0,\r\n        top: 0\r\n    }\r\n\r\n    private colorNode: Element | null = null\r\n\r\n    public render(): JSX.Element {\r\n        const { className } = this.props\r\n        const { color, visible, left, top } = this.state\r\n        return (\r\n            <div className={getClassName(`${prefixClass} flex_justify`, className)}>\r\n                <div className=\"flex\">\r\n                    <div className={getClassName(`${prefixClass}_color`)} ref={(e) => this.colorNode = e} onClick={this.handleClick}>\r\n                        <div className={getClassName(`${prefixClass}_color_box`)} style={{ background: color }}></div>\r\n                    </div>\r\n                    <div className={getClassName(`${prefixClass}_label flex_justify`)}>{color}</div>\r\n                </div>\r\n                <Mask visible={visible} onClose={this.handleClose}>\r\n                    <div className={getClassName(`${prefixClass}_select`)} style={{ left, top }}>\r\n                        {this.getColorNode()}\r\n                    </div>\r\n                </Mask>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    private handleClick = (e: MouseEvent<HTMLDivElement>) => {\r\n        let left = 0\r\n        let top = 0\r\n        if (this.colorNode) {\r\n            const obj = this.colorNode.getBoundingClientRect()\r\n            left = obj.left\r\n            top = obj.top + obj.height + 10\r\n        }\r\n\r\n        this.setState({\r\n            visible: true,\r\n            left,\r\n            top\r\n        })\r\n    }\r\n\r\n    private handleClose = (status: boolean) => {\r\n        this.setState({\r\n            visible: status\r\n        })\r\n    }\r\n\r\n    private getColorNode() {\r\n        const { width, height, type } = this.props\r\n        const { color } = this.state\r\n        const props: any = {\r\n            className: getClassName(`${prefixClass}_${type}`),\r\n            width,\r\n            height,\r\n            onChange: this.handleChange,\r\n            color\r\n        }\r\n\r\n        // tslint:disable-next-line: switch-default\r\n        switch (type) {\r\n            case 'github': {\r\n                if (!width) {\r\n                    props.width = 212\r\n                }\r\n                // tslint:disable-next-line: align\r\n            } break\r\n            case 'twitter': {\r\n                if (!height) {\r\n                    props.width = 212\r\n                }\r\n                // tslint:disable-next-line: align\r\n            } break\r\n        }\r\n        switch (type) {\r\n            case 'swatches': return <SwatchesPicker {...props} />\r\n            case 'material': return <MaterialPicker {...props} />\r\n            case 'compact': return <CompactPicker {...props} />\r\n            case 'slider': return <SliderPicker {...props} />\r\n            case 'circle': return <CirclePicker {...props} />\r\n            case 'alpha': return <AlphaPicker {...props} />\r\n            case 'hue': return <HuePicker {...props} />\r\n            case 'twitter': return <TwitterPicker {...props} />\r\n            case 'github': return <GithubPicker {...props} />\r\n            case 'block': return <BlockPicker {...props} />\r\n            case 'chrome': return <ChromePicker {...props} />\r\n            default: return <SketchPicker {...props} />\r\n        }\r\n    }\r\n\r\n    private handleChange = (color: ColorResult, event: ChangeEvent) => {\r\n        const { onChange } = this.props\r\n        this.setState({\r\n            color: color.hex\r\n        })\r\n        if (isFunction(onChange)) {\r\n            onChange(color, event)\r\n        }\r\n    }\r\n}\r\n","import React, { Component, Fragment, MouseEvent } from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { getClassName } from '../utils'\r\n\r\ninterface IProps {\r\n    visible: boolean\r\n    onClose: (status: boolean) => void\r\n}\r\n\r\nlet globalNode: Element | null\r\n\r\nconst prefixClass = 'colors_mask'\r\n\r\nexport default class Mask extends Component<IProps, any> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props)\r\n        if (typeof document !== 'undefined') {\r\n            globalNode = document.querySelector(`.${getClassName('mask_box')}`)\r\n            if (globalNode) {\r\n                this.node = globalNode\r\n            } else {\r\n                const dom = document.createElement('div')\r\n                dom.className = getClassName('mask_box')\r\n                const body = document.querySelector('body')\r\n                if (body) {\r\n                    body.appendChild(dom)\r\n                }\r\n                this.node = dom\r\n                globalNode = dom\r\n            }\r\n        }\r\n    }\r\n\r\n    private node: Element | null = null\r\n\r\n    private boxNode: Element | null = null\r\n\r\n    public render(): JSX.Element {\r\n        const { children, visible } = this.props\r\n        if (this.node) {\r\n            return createPortal(\r\n                <div className={getClassName(`${prefixClass}`)} style={{ display: !visible ? 'none' : '' }} ref={(e) => this.boxNode = e} onClick={this.handleClick}>\r\n                    {children}\r\n                </div>\r\n                , this.node\r\n            )\r\n        }\r\n        return <Fragment />\r\n    }\r\n\r\n    private handleClick = (e: MouseEvent<HTMLDivElement>) => {\r\n        const { onClose } = this.props\r\n        if (e.target !== this.boxNode) {\r\n            return\r\n        }\r\n        onClose(false)\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAmBA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AACA;AACA;AACA;AAJA;AACA;AAZA;AACA;AADA;AA0CA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAxDA;AA0DA;AACA;AADA;AAGA;AACA;AA9DA;AAyGA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAhHA;AACA;AACA;AACA;AALA;AAKA;AACA;;;AAcA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;AACA;AAaA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAcA;;;;AAzGA;AACA;AADA;AAUA;AADA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AAOA;AAEA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AAoCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjBA;AAiBA;AACA;;;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;;;;AApCA;AACA;;;;;A","sourceRoot":""}