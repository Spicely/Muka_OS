{"version":3,"file":"7.js","sources":["webpack:///./components/lib/LUpload/index.tsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { UploadChangeParam, UploadProps } from 'antd/lib/upload'\r\nimport { message, Upload } from 'antd'\r\nimport { getClassName } from '../utils'\r\nimport Icon from '../Icon'\r\nimport { omit, isFunction, hash } from 'muka'\r\n\r\nexport interface ILUploadResponse {\r\n    data: string\r\n    [params: string]: any\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface ILUploadChangeParam extends UploadChangeParam { }\r\n\r\nexport interface ILUpload extends UploadProps {\r\n    fileTypes?: string[]\r\n    fileSize?: number\r\n    baseUrl?: string\r\n    onDone?: (params: ILUploadResponse[]) => void\r\n    maxLength?: number\r\n}\r\n\r\nexport default class LUpload extends Component<ILUpload, any> {\r\n    public static defaultProps: ILUpload = {\r\n        listType: 'picture-card',\r\n        fileTypes: ['image/jpeg', 'image/png'],\r\n        name: 'avatar',\r\n        baseUrl: '',\r\n        fileList: []\r\n    }\r\n\r\n    public state = {\r\n        loading: false,\r\n        fileList: []\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const { className, fileList, maxLength, baseUrl, action } = this.props\r\n        const { loading } = this.state\r\n        const uploadButton = (\r\n            <div>\r\n                <Icon icon={loading ? 'loading' : 'md-add'} rotate={loading ? true : false} />\r\n                <div className=\"ant-upload-text\">上传文件</div>\r\n            </div>\r\n        )\r\n        const props = omit(this.props, ['className', 'onChange', 'onDone', 'fileTypes', 'fileSize', 'maxLength', 'action', 'baseUrl'])\r\n        return (\r\n            <Upload\r\n                {...props}\r\n                action={`${baseUrl}${action || ''}`}\r\n                className={getClassName('upload', className)}\r\n                beforeUpload={this.beforeUpload}\r\n                onChange={this.handleChange}\r\n            >\r\n                {(fileList && fileList.length >= (maxLength || 3)) ? null : uploadButton}\r\n            </Upload>\r\n        )\r\n    }\r\n\r\n    private beforeUpload = (file: any) => {\r\n        const { fileTypes, fileSize } = this.props\r\n        let hashType = true\r\n        let hashSize = true\r\n\r\n        if (fileTypes) {\r\n            hashType = hash(fileTypes, file.type)\r\n            if (!hashType) {\r\n                message.error(`Image must smaller than ${fileTypes.join(' | ')}`)\r\n            }\r\n        }\r\n        if (fileSize) {\r\n            hashSize = file.size / 1024 / 1024 < fileSize\r\n            if (!hashSize) {\r\n                message.error(`Image must smaller than ${fileSize}MB!`)\r\n            }\r\n        }\r\n        return hashType && hashSize\r\n    }\r\n\r\n    private handleChange = (info: UploadChangeParam) => {\r\n        const { onDone, onChange } = this.props\r\n        this.setState({ loading: true })\r\n        if (isFunction(onChange)) {\r\n            onChange(info)\r\n        }\r\n\r\n        if (info.fileList.every((i) => i.status === 'done')) {\r\n            this.setState({\r\n                loading: false,\r\n            })\r\n            if (isFunction(onDone)) {\r\n                onDone(info.fileList.map((i) => i.response))\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AAkBA;;;;;;;;;;;;;;;;;;AASA;AACA;AACA;AAFA;AACA;AA2BA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AA3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AALA;AAUA;;;;AAnCA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;A","sourceRoot":""}